<?xml version="1.0" encoding="UTF-8" ?>
<project name="jgex" default="all" basedir=".">

    <property name="src" value="."/>
    <property name="dest" value="classes"/>
    <property name="out" value="output"/>
    <property name="jgex_jar" value="jgex.jar"/>
    <property name="deb_out" value="deb_output"/>
    <property name="version" value="0.80"/>

    <!-- Please override these settings with "ant -Ddate=... <task>" -->
    <property name="date" value="2021Jul12"/>
    <property name="bundled_jdk" value="&quot;c:/Program Files/JetBrains/IntelliJ IDEA Community Edition 2021.1/jbr&quot;"/>

    <!-- Step 0:  detect OS and set some variables for later use (ZIP package creation) -->
    <target name="checkos">
        <condition property="platform" value="windows64">
            <os family="windows" />
        </condition>

        <condition property="platform" value="mac">
            <os family="mac" />
        </condition>
    </target>

    <!-- Step 1:  clean already existing directories and files -->
    <target name="clean">
       <delete dir="${dest}"/>
       <delete dir="${out}" />
    </target>

    <!-- Step 2:  create output directories -->
    <target name="init" description="Initialize">
        <mkdir dir="${dest}/maths"/>
        <mkdir dir="${dest}/gprover"/>
        <mkdir dir="${dest}/UI"/>
        <mkdir dir="${dest}/wprover"/>
        <mkdir dir="${dest}/pdf"/>
    </target>

    <!-- Step 3:  compile all .java files, here we have five packages totally -->
    <target name="compile" depends="init" description="compiling jgex">
        <javac  srcdir="${src}" destdir="${dest}" includes="pdf/**, UI/**, maths/**, gprover/**, wprover/**"
                debug="off" nowarn="on" source="8" includeantruntime="false"/>
    </target>

    <!-- Step 4:  copy all images to destination before generating jar file  -->
    <target name="copy-images" depends="compile"
            description="Copy all images to destination">
        <copy todir="${dest}/wprover" overwrite="true">
            <fileset dir="${src}/wprover">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>

        <copy todir="${dest}" overwrite="true">
            <fileset dir="${src}/wprover/images/about">
                <exclude name="**/**/**/head*.*"/>
                <exclude name="**/**/**/*.db"/>
            </fileset>
        </copy>

    </target>

    <!-- Step 5:  build jgex.jar file -->
    <target name="build" depends="compile, copy-images" description="building jgex">
        <jar jarfile="${out}/${jgex_jar}" manifest="./MANIFEST.MF" basedir="${dest}"/>
    </target>

    <!-- Step 6:  copy all resources (examples, rules and help) to output folder -->
    <target name="copy-resources" depends="build"
            description="Copy resources to output folder">

        <mkdir dir="${out}/rules"/>
        <copy todir="${out}/rules/" overwrite="true">
            <fileset  dir="${src}/rules">
            </fileset>
        </copy>

        <mkdir dir="${dest}/examples"/>
        <copy todir="${out}/examples" overwrite="true">
            <fileset  dir="${src}/examples">
            </fileset>
        </copy>

        <mkdir dir="${dest}/language"/>
        <copy todir="${out}/language" overwrite="true">
            <fileset  dir="${src}/language">
            </fileset>
        </copy>

        <mkdir dir="${out}/help"/>
        <copy todir="${out}/help/" overwrite="true">
            <fileset  dir="${src}/help">
            </fileset>
        </copy>

    </target>

    <!-- Step 7:  run JGEX -->
    <target name="run_all" depends="build" description="Run jar file (after rebuild)">
        <java jar="${out}/${jgex_jar}" classpath="${out}/"
              fork="true"
              failonerror="true"
              maxmemory="128m"/>
    </target>

    <!-- Step 8:  default action, build jgex.jar and run all -->
    <target name="all" depends="init, compile, copy-resources, copy-images, build, run_all"
            description="build and run all"/>

    <!-- Rebuild jgex.jar and run all -->
    <target name="all_rebuild" depends="clean, all"
            description="rebuild and run all"/>

    <!-- Build Applet 1 for simple animation. -->
    <target name="build1" depends="compile" description="building jgex1">
        <delete dir="${out}"/>
        <mkdir dir="${out}"/>
        <jar jarfile="${out}/${jgex_jar}" manifest="./MANIFEST1.MF" basedir="${dest}"/>
    </target>

    <target name="gexApp1" depends="clean, init, compile,copy-images, build1" description="build applet 1"/>

    <!-- run. This just runs jar file without rebuild. -->
    <target name="run" description="Run jar file">
        <java jar="${out}/${jgex_jar}" classpath="${out}/"
              fork="true"
              failonerror="true"
              maxmemory="128m"/>
    </target>

    <!-- Optional. Create a Debian package (only on Linux). -->
    <target name="deb_package">
      <get src="https://repo1.maven.org/maven2/org/vafer/jdeb/1.9/jdeb-1.9.jar" dest="jdeb.jar"
           skipexisting="true"/>

      <taskdef name="deb" classname="org.vafer.jdeb.ant.DebAntTask" classpath="jdeb.jar"/>
      <copy todir="${deb_out}/control">
        <fileset dir="deb/control"/>
        <filterset begintoken="[[" endtoken="]]">
          <filter token="version" value="${version}"/>
          <filter token="name" value="${ant.project.name}"/>
        </filterset>
      </copy>
      <deb destfile="jgex_${version}_all.deb" control="${deb_out}/control">
        <data src="output" type="directory">
          <mapper type="perm" prefix="/usr/share/jgex"/>
        </data>
        <data src="deb/jgex" type="file">
          <mapper type="perm" filemode="755" prefix="/usr/bin"/>
        </data>
      </deb>
    </target>

    <!-- Optional. Create a .zip package. -->
    <target name="zip_package" depends="checkos">
      <get src="https://github.com/libgdx/packr/releases/download/4.0.0/packr-all-4.0.0.jar" dest="packr.jar"
           skipexisting="true"/>
      <exec executable="java" dir="${out}">
        <arg line="-jar ..${file.separator}packr.jar 
             --platform ${platform}
             --jdk ${bundled_jdk}
             --executable jgex
             --classpath jgex.jar
             --mainclass wprover.GExpert
             --resources examples help language rules --output jgex-${version}-${platform}-${date}"/>
      </exec>
      <zip destfile="${out}/jgex-${version}-${platform}-${date}.zip"
           basedir="${out}/jgex-${version}-${platform}-${date}" update="true"/>
    </target>

</project>